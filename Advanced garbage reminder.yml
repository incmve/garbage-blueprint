blueprint:
  name: Garbage reminder
  description: Get advanced notification when to put out what bin
  domain: automation
  input:
    reminder_time:
      name: Reminder time
      description: At what time the day before do you want to be reminded
      default: '18:00:00'
      selector:
        time: {}
    day_offset:
      name: Day offset
      description: Amount of days to be added to the triggers date to check for sensor
        value matches. E.g. 1 to be notified the day before or 0 for notification
        on the garbage collection day.
      default: 1
    date_format:
      name: Date format
      description: Valid strftime date format. Default %d-%m-%y
      default: '%d-%m-%y'
    reminder_title:
      name: Reminder title
      description: Shown as title in the notification
      default: Garbage reminder
    reminder_message:
      name: Reminder message
      description: Accompanying text in the notification
      default: 'The following garbage will be picked up tomorrow: '
    notify_device:
      name: Notification
      description: Device needs to run the official Home Assistant app to receive notifications
      selector:
        device:
          integration: mobile_app
    garbage_sensor_1:
      name: Garbage sensor 1
      description: Sensor should be a date string formatted according to the date format input
      default: ''
      selector:
        entity:
          domain: sensor
    garbage_sensor_2:
      name: Garbage sensor 2
      description: Sensor should be a date string formatted according to the date format input
      default: ''
      selector:
        entity:
          domain: sensor
    garbage_sensor_3:
      name: Garbage sensor 3
      description: Sensor should be a date string formatted according to the date format input
      default: ''
      selector:
        entity:
          domain: sensor
    garbage_sensor_4:
      name: Garbage sensor 4
      description: Sensor should be a date string formatted according to the date format input
      default: ''
      selector:
        entity:
          domain: sensor
    input_boolean:
      name: Dedicated input_boolean
      description: Create and set here a input_boolean to handle history and state of the automation
      selector:
        entity:
          domain: input_boolean
    notification_action_taken:
      name: "Notification action: Taken (Optional)"
      description: "Default: Taken"
      default: "Taken"

    notification_action_later:
      name: "Notification action: Ask later (Optional)"
      description: "Default: Ask later"
      default: "Ask later"

    notification_action_skip:
      name: "Notification action: Skip (Optional)"
      description: "Default: Skip"
      default: "Skip"
    ask_later_wait_time:
      name: Wait time before next reminder
      description: Minutes before notify again after a Ask later action.
      default: 30
      selector:
        number:
          min: 5
          max: 1440
          unit_of_measurement: minutes
variables:
  garbage_sensor_1: !input 'garbage_sensor_1'
  garbage_sensor_2: !input 'garbage_sensor_2'
  garbage_sensor_3: !input 'garbage_sensor_3'
  garbage_sensor_4: !input 'garbage_sensor_4'
  reminder_title: !input 'reminder_title'
  reminder_message: !input 'reminder_message'
  day_offset: !input 'day_offset'
  date_format: !input 'date_format'
  sensors_tomorrow: '{{ [(state_attr(garbage_sensor_1, ''friendly_name''), states(garbage_sensor_1)), (state_attr(garbage_sensor_2, ''friendly_name''), states(garbage_sensor_2)), (state_attr(garbage_sensor_3, ''friendly_name''), states(garbage_sensor_3)), (state_attr(garbage_sensor_4, ''friendly_name''), states(garbage_sensor_4))] | selectattr(''1'', ''eq'', (now() + timedelta(days = day_offset | int)).strftime(date_format)) | join('', '',  attribute=0) }}'
trigger:
  platform: time
  at: !input 'reminder_time'
condition:
  condition: template
  value_template: "{{ sensors_tomorrow != '' }}"
action:
  - service: input_boolean.turn_off
    target:
      entity_id: !input input_boolean
  - alias: "Notify until the Garbage has been take"
    repeat:
      while:
        - condition: state
          entity_id: !input input_boolean
          state: "off"
      sequence:
        - device_id: !input notify_device
          domain: mobile_app
          type: notify
          title: !input reminder_title
          message: !input sensors_tomorrow
          data:
            actions:
              - title: !input notification_action_taken
                action: "taken"
              - title: !input notification_action_later
                action: "later"
              - title: !input notification_action_skip
                action: "skip"
            tag: "Garbage-reminder"
        - wait_for_trigger:
            platform: event
            event_type: mobile_app_notification_action
          timeout:
            minutes: !input ask_later_wait_time
        - choose:
            - conditions: "{{ wait.trigger.event.data.action == 'taken' }}"
              sequence:
                - service: input_boolean.turn_on
                  target:
                    entity_id: !input input_boolean
            - conditions: "{{ wait.trigger.event.data.action == 'later' }}"
              sequence:
                - delay:
                    minutes: !input ask_later_wait_time
            - conditions: "{{ wait.trigger.event.data.action == 'skip' }}"
              sequence:
                - service: input_boolean.turn_on
                  target:
                    entity_id: !input input_boolean
          default:
            - device_id: !input notify_device
              domain: mobile_app
              type: notify
              message: "clear_notification"
              data:
                tag: "Garbage-reminder"
